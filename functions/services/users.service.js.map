{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport { HttpException } from '@exceptions/httpException';\nimport { User } from '@interfaces/users.interface';\nimport { UserModel } from '@models/users.model';\n\n@Service()\nexport class UserService {\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = await UserModel.find();\n    return users;\n  }\n\n  public async findUserById(userId: string): Promise<User> {\n    const findUser: User = await UserModel.findOne({ _id: userId });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: User): Promise<User> {\n    const findUser: User = await UserModel.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await UserModel.create({ ...userData, password: hashedPassword });\n\n    return createUserData;\n  }\n\n  public async updateUser(userId: string, userData: User): Promise<User> {\n    if (userData.email) {\n      const findUser: User = await UserModel.findOne({ email: userData.email });\n      if (findUser && findUser._id != userId) throw new HttpException(409, `This email ${userData.email} already exists`);\n    }\n\n    if (userData.password) {\n      const hashedPassword = await hash(userData.password, 10);\n      userData = { ...userData, password: hashedPassword };\n    }\n\n    const updateUserById: User = await UserModel.findByIdAndUpdate(userId, { userData });\n    if (!updateUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return updateUserById;\n  }\n\n  public async deleteUser(userId: string): Promise<User> {\n    const deleteUserById: User = await UserModel.findByIdAndDelete(userId);\n    if (!deleteUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return deleteUserById;\n  }\n}\n"],"names":["UserService","findAllUser","users","UserModel","find","findUserById","userId","findUser","findOne","_id","HttpException","createUser","userData","email","hashedPassword","hash","password","createUserData","create","updateUser","updateUserById","findByIdAndUpdate","deleteUser","deleteUserById","findByIdAndDelete","Service"],"mappings":";;;;+BAOaA;;aAAAA;;wBAPQ;wBACG;+BACM;4BAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGbA,cAAN;IACL,MAAaC,cAA+B;QAC1C,MAAMC,QAAgB,MAAMC,qBAAS,CAACC,IAAI;QAC1C,OAAOF;IACT;IAEA,MAAaG,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiB,MAAMJ,qBAAS,CAACK,OAAO,CAAC;YAAEC,KAAKH;QAAO;QAC7D,IAAI,CAACC,UAAU,MAAM,IAAIG,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOH;IACT;IAEA,MAAaI,WAAWC,QAAc,EAAiB;QACrD,MAAML,WAAiB,MAAMJ,qBAAS,CAACK,OAAO,CAAC;YAAEK,OAAOD,SAASC,KAAK;QAAC;QACvE,IAAIN,UAAU,MAAM,IAAIG,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEE,SAASC,KAAK,CAAC,eAAe,CAAC,EAAE;QAE1F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMd,qBAAS,CAACe,MAAM,CAAC,wCAAKN;YAAUI,UAAUF;;QAE7E,OAAOG;IACT;IAEA,MAAaE,WAAWb,MAAc,EAAEM,QAAc,EAAiB;QACrE,IAAIA,SAASC,KAAK,EAAE;YAClB,MAAMN,WAAiB,MAAMJ,qBAAS,CAACK,OAAO,CAAC;gBAAEK,OAAOD,SAASC,KAAK;YAAC;YACvE,IAAIN,YAAYA,SAASE,GAAG,IAAIH,QAAQ,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEE,SAASC,KAAK,CAAC,eAAe,CAAC,EAAE;QACtH,CAAC;QAED,IAAID,SAASI,QAAQ,EAAE;YACrB,MAAMF,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;YACrDJ,WAAW,wCAAKA;gBAAUI,UAAUF;;QACtC,CAAC;QAED,MAAMM,iBAAuB,MAAMjB,qBAAS,CAACkB,iBAAiB,CAACf,QAAQ;YAAEM;QAAS;QAClF,IAAI,CAACQ,gBAAgB,MAAM,IAAIV,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOU;IACT;IAEA,MAAaE,WAAWhB,MAAc,EAAiB;QACrD,MAAMiB,iBAAuB,MAAMpB,qBAAS,CAACqB,iBAAiB,CAAClB;QAC/D,IAAI,CAACiB,gBAAgB,MAAM,IAAIb,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOa;IACT;AACF;AA9CavB;IADZyB,IAAAA,eAAO;GACKzB"}